
module rom(input [3:0] addr,output reg [15:0]instr);
reg [15:0] memory[0:15];
initial begin
memory[0] = 16'b0000000100100000; // ADD R1, R2  => 1 + 2 = 3
    memory[1] = 16'b0001000100110000; // SUB R1, R3  => 3 - 3 = 0
    memory[2] = 16'b1110000101010000; // LOAD R1, [5] => regfile[1] = memory[5]
    memory[3] = 16'b1100001000110000; // MUL R2, R3 => 2 * 3 = 6
    memory[4] = 16'b1111000101100000; // STORE R1, [6] => memory[6] = regfile[1]
    memory[5] = 16'b0000000100010000; // ADD R1, R1 => R1 = R1 + R1
    memory[6] = 16'b0000001000010000; // ADD R2, R1 => R2 = R2 + R1
    memory[7] = 16'b0010001100010000; // AND R3, R1 => R3 = R3 & R1
    memory[8] = 16'b0011001000010000; // OR R2, R1 => R2 = R2 | R1
    memory[9] = 16'b0100000100100000; // XOR R1, R2 => R1 = R1 ^ R2
    memory[10] = 16'b0101001100100000; // NOR R3, R2 => R3 = ~(R3 | R2)
    memory[11] = 16'b0110001000110000; // NAND R2, R3 => R2 = ~(R2 & R3)
    memory[12] = 16'b0111001100010000; // XNOR R3, R1 => R3 = ~(R3 ^ R1)
    memory[13] = 16'b1000000100110000; // SHL R1, R3 => R1 << R3
    memory[14] = 16'b1001000100110000; // SHR R1, R3 => R1 >> R3
    memory[15] = 16'b1010000000000000; // NOP

end
always@(*)begin
instr=memory[addr];
end
endmodule
